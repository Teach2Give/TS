TypeScript Best Practices
1. Use Interfaces for Data Structures
Define interfaces to represent the shape of your data.

interface User {
  id: number;
  userName: string;
  displayName: string;
}

const userData: User[] = [
  { id: 1, userName: "alamin", displayName: "alamin254" },
  { id: 2, userName: "Emmanuel", displayName: "emm254" },
];


2. Use Type Aliases for Unions or Complex Types
Use type aliases for union types or more complex types.
type UserResponse = User | null;

const getUser = (id: number): UserResponse => {
  const user = userData.find(user => user.id === id);
  return user || null;
};


3. Keep Interfaces Simple and Focused
Make interfaces specific to their use case.
interface User {
  id: number;
  userName: string;
}

interface UserProfile extends User {
  displayName: string;
  bio?: string; // Optional property
}


4. Use Enums for Fixed Sets of Values
Use enums for a fixed set of related constants.
enum UserRole {
  Admin = "ADMIN",
  User = "USER",
  Guest = "GUEST",
}

interface User {
  id: number;
  userName: string;
  role: UserRole;
}


5. Leverage Optional Properties
Specify optional properties using ?.
interface User {
  id: number;
  userName: string;
  displayName?: string; // Optional property
}


6. Use Generics for Reusable Components
Generics allow you to create reusable components.
interface ApiResponse<T> {
  data: T;
  status: number;
  message?: string;
}

const fetchUserData = async (id: number): Promise<ApiResponse<User>> => {
  // Simulate fetching user data
  return {
    data: { id, userName: "alamin" },
    status: 200,
  };
};


7. Use Descriptive Naming Conventions
Use clear and descriptive names for your interfaces and types.
interface CreateUserRequest {
  userName: string;
  displayName: string;
}



enum UserRole {
  Admin = "ADMIN",
  User = "USER",
  Guest = "GUEST",
}

interface User {
  id: number;
  userName: string;
  displayName?: string;
  role: UserRole;
}

interface ApiResponse<T> {
  data: T;
  status: number;
  message?: string;
}

const userData: User[] = [
  { id: 1, userName: "alamin", displayName: "alamin254", role: UserRole.User },
  { id: 2, userName: "Emmanuel", role: UserRole.Admin },
];

const fetchUserData = async (id: number): Promise<ApiResponse<User | null>> => {
  const user = userData.find(user => user.id === id);
  return {
    data: user || null,
    status: user ? 200 : 404,
    message: user ? undefined : "User not found",
  };
};
